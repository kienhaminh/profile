openapi: 3.0.3
info:
  title: Project API
  description: API for managing portfolio projects with technologies and hashtags
  version: 1.0.0

servers:
  - url: /api
    description: API base path

paths:
  /projects:
    get:
      summary: List projects
      description: Get a paginated list of projects with optional filtering
      operationId: listProjects
      tags:
        - Project
      parameters:
        - name: status
          in: query
          description: Filter by project status
          schema:
            type: string
            enum: [DRAFT, PUBLISHED]
        - name: technologyId
          in: query
          description: Filter by technology ID
          schema:
            type: string
            format: uuid
        - name: hashtagId
          in: query
          description: Filter by hashtag ID
          schema:
            type: string
            format: uuid
        - name: search
          in: query
          description: Search in title and description
          schema:
            type: string
        - name: page
          in: query
          description: Page number (0-indexed)
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectWithRelations"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

    post:
      summary: Create project
      description: Create a new project (super admin only)
      operationId: createProject
      tags:
        - Project
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectRequest"
      responses:
        "201":
          description: Project created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectWithRelations"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
        "409":
          description: Slug already exists

  /projects/{id}:
    get:
      summary: Get project
      description: Get a single project by ID
      operationId: getProject
      tags:
        - Project
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Project found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectWithRelations"
        "404":
          description: Project not found

    put:
      summary: Update project
      description: Update an existing project (super admin only)
      operationId: updateProject
      tags:
        - Project
      security:
        - sessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectRequest"
      responses:
        "200":
          description: Project updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectWithRelations"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
        "404":
          description: Project not found
        "409":
          description: Slug already exists

    delete:
      summary: Delete project
      description: Delete a project and all its associations (super admin only)
      operationId: deleteProject
      tags:
        - Project
      security:
        - sessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Project deleted
        "401":
          description: Unauthorized
        "404":
          description: Project not found

components:
  schemas:
    Project:
      type: object
      required:
        - id
        - title
        - slug
        - status
        - description
        - images
        - isOngoing
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 200
        slug:
          type: string
          pattern: "^[a-z0-9-]+$"
        status:
          type: string
          enum: [DRAFT, PUBLISHED]
        description:
          type: string
          minLength: 1
        images:
          type: array
          items:
            type: string
            format: uri
        githubUrl:
          type: string
          format: uri
          nullable: true
        liveUrl:
          type: string
          format: uri
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        isOngoing:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProjectWithRelations:
      allOf:
        - $ref: "#/components/schemas/Project"
        - type: object
          required:
            - technologies
            - hashtags
          properties:
            technologies:
              type: array
              items:
                $ref: "#/components/schemas/Technology"
            hashtags:
              type: array
              items:
                $ref: "#/components/schemas/Hashtag"

    Technology:
      type: object
      required:
        - id
        - name
        - slug
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time

    Hashtag:
      type: object
      required:
        - id
        - name
        - slug
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time

    CreateProjectRequest:
      type: object
      required:
        - title
        - slug
        - description
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        slug:
          type: string
          pattern: "^[a-z0-9-]+$"
        status:
          type: string
          enum: [DRAFT, PUBLISHED]
          default: DRAFT
        description:
          type: string
          minLength: 1
        images:
          type: array
          items:
            type: string
            format: uri
          default: []
        githubUrl:
          type: string
          format: uri
        liveUrl:
          type: string
          format: uri
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        isOngoing:
          type: boolean
          default: false
        technologyIds:
          type: array
          items:
            type: string
            format: uuid
        hashtagIds:
          type: array
          items:
            type: string
            format: uuid

    UpdateProjectRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        slug:
          type: string
          pattern: "^[a-z0-9-]+$"
        status:
          type: string
          enum: [DRAFT, PUBLISHED]
        description:
          type: string
          minLength: 1
        images:
          type: array
          items:
            type: string
            format: uri
        githubUrl:
          type: string
          format: uri
        liveUrl:
          type: string
          format: uri
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        isOngoing:
          type: boolean
        technologyIds:
          type: array
          items:
            type: string
            format: uuid
        hashtagIds:
          type: array
          items:
            type: string
            format: uuid

    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0

  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: session
